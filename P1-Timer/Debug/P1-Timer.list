
P1-Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c24  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000dbc  08000dbc  00010dc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dbc  08000dc4  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000dc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000dc4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000131f  00000000  00000000  00010df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058b  00000000  00000000  00012113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  000126a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  000127b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6af  00000000  00000000  00012868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b82  00000000  00000000  0002ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3355  00000000  00000000  00031a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000374  00000000  00000000  000d4e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d94 	.word	0x08000d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000d94 	.word	0x08000d94

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <UART2_Init+0x40>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <UART2_Init+0x40>)
 800083e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000842:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <UART2_Init+0x40>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <UART2_Init+0x40>)
 800084c:	f023 030c 	bic.w	r3, r3, #12
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <UART2_Init+0x40>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <UART2_Init+0x40>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000864:	f000 f80a 	bl	800087c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <UART2_Init+0x44>)
 800086a:	f000 f84f 	bl	800090c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40004400 	.word	0x40004400

0800087c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <UART2_GPIO_Init+0x8c>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	4a20      	ldr	r2, [pc, #128]	; (8000908 <UART2_GPIO_Init+0x8c>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 800088c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800089a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 800089c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008a6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80008aa:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80008ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80008bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008c0:	6a1b      	ldr	r3, [r3, #32]
 80008c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008c6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80008ca:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80008cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008d6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008da:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80008dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008ea:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80008ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008f6:	f023 030c 	bic.w	r3, r3, #12
 80008fa:	6053      	str	r3, [r2, #4]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 0201 	bic.w	r2, r3, #1
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f242 028d 	movw	r2, #8333	; 0x208d
 800094a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f043 020c 	orr.w	r2, r3, #12
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <USART_Init+0x100>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d129      	bne.n	80009b4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f043 0220 	orr.w	r2, r3, #32
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f023 0210 	bic.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 0201 	bic.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <USART_Init+0x104>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d10b      	bne.n	80009d4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <USART_Init+0x108>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <USART_Init+0x108>)
 80009ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009d2:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f043 0201 	orr.w	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80009e0:	bf00      	nop
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f9      	beq.n	80009e2 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80009ee:	bf00      	nop
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f9      	beq.n	80009f0 <USART_Init+0xe4>
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40004c00 	.word	0x40004c00
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40013800 	.word	0x40013800

08000a18 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000a20:	bf00      	nop
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f9      	beq.n	8000a22 <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e014      	b.n	8000a7e <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000a54:	bf00      	nop
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f9      	beq.n	8000a56 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000a70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a74:	f000 f818 	bl	8000aa8 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d8e6      	bhi.n	8000a54 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000a86:	bf00      	nop
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f9      	beq.n	8000a88 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	61da      	str	r2, [r3, #28]
}   
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <USART_Delay>:
 


void USART_Delay(uint32_t us) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2264      	movs	r2, #100	; 0x64
 8000ab4:	fb03 f202 	mul.w	r2, r3, r2
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <USART_Delay+0x3c>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	1ad2      	subs	r2, r2, r3
 8000ac0:	0852      	lsrs	r2, r2, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <USART_Delay+0x20>
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	24924925 	.word	0x24924925

08000ae8 <clock_init>:

//******************************************************************************************
// System boots with MSI clock enabled. Switch to HSI.
//******************************************************************************************

void clock_init(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

	// Enable the High Speed Internal oscillator (HSI)
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <clock_init+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <clock_init+0x68>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000af8:	bf00      	nop
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <clock_init+0x68>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f9      	beq.n	8000afa <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <clock_init+0x68>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <clock_init+0x68>)
 8000b0c:	f023 0303 	bic.w	r3, r3, #3
 8000b10:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <clock_init+0x68>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <clock_init+0x68>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & RCC_CFGR_SWS) ==  RCC_CFGR_SWS_PLL) {;}
 8000b1e:	bf00      	nop
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <clock_init+0x68>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d0f9      	beq.n	8000b20 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <clock_init+0x68>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <clock_init+0x68>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <clock_init+0x68>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <clock_init+0x68>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <led_init>:
// • When the I/O is LOW, the LED is off

#define LED_PIN 5

void led_init(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	// Configure LED_PIN as an output
    GPIOA->MODER &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two MODE bits for this pin
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b66:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=   0x1<<(LED_PIN*2)  ;        // 0x1 means output
 8000b68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]

    // ...and as push-pull drive
    GPIOA->OTYPER &= ~(0x1<<LED_PIN) ;
 8000b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b82:	f023 0320 	bic.w	r3, r3, #32
 8000b86:	6053      	str	r3, [r2, #4]

    // ...with medium speed
    GPIOA->OSPEEDR &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two OSPEED bits for this pin
 8000b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b96:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=   0x1<<(LED_PIN*2)  ;        // 0x1 means medium speed
 8000b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6093      	str	r3, [r2, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <led_set>:

void led_set(_Bool isOn )
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
	if(isOn)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <led_set+0x22>
		GPIOA->ODR &= ~(1 << LED_PIN);
 8000bc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bcc:	f023 0320 	bic.w	r3, r3, #32
 8000bd0:	6153      	str	r3, [r2, #20]
	else
		GPIOA->ODR |=  (1 << LED_PIN);
}
 8000bd2:	e007      	b.n	8000be4 <led_set+0x32>
		GPIOA->ODR |=  (1 << LED_PIN);
 8000bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6153      	str	r3, [r2, #20]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <main>:
#include <stdio.h>
#include <ctype.h>
#include <uart.h>

uint8_t buffer[100];
int main(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
	int		some_int;
	float 	some_float = 1.0;
 8000bf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000bfa:	60fb      	str	r3, [r7, #12]
	int		n ;

	clock_init(); // Switch System Clock = 80 MHz
 8000bfc:	f7ff ff74 	bl	8000ae8 <clock_init>
	led_init();
 8000c00:	f7ff ffa8 	bl	8000b54 <led_init>
	UART2_Init();	// initialize USART2
 8000c04:	f7ff fe16 	bl	8000834 <UART2_Init>

	while (1){

	    // create some values to print
		some_float *= -1.618;
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fd6b 	bl	80006e4 <__aeabi_f2d>
 8000c0e:	a31f      	add	r3, pc, #124	; (adr r3, 8000c8c <main+0x9c>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fad8 	bl	80001c8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f7ff fdb8 	bl	8000794 <__aeabi_d2f>
 8000c24:	4603      	mov	r3, r0
 8000c26:	60fb      	str	r3, [r7, #12]
		some_int = some_float;
 8000c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c30:	ee17 3a90 	vmov	r3, s15
 8000c34:	60bb      	str	r3, [r7, #8]
		char *msg = "";
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <main+0x88>)
 8000c38:	607b      	str	r3, [r7, #4]

		// toggle User LED based on user input
		char rxByte = USART_Read(USART2);
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <main+0x8c>)
 8000c3c:	f7ff feec 	bl	8000a18 <USART_Read>
 8000c40:	4603      	mov	r3, r0
 8000c42:	70fb      	strb	r3, [r7, #3]
		// 'L' turns LED on
		if (rxByte == 'L') {
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b4c      	cmp	r3, #76	; 0x4c
 8000c48:	d105      	bne.n	8000c56 <main+0x66>
			led_set(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ffb1 	bl	8000bb2 <led_set>
			msg = "ON";
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <main+0x90>)
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	e007      	b.n	8000c66 <main+0x76>
		}

		// 'l' turns it off
		else if(rxByte == 'l') {
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	2b6c      	cmp	r3, #108	; 0x6c
 8000c5a:	d104      	bne.n	8000c66 <main+0x76>
			led_set(0);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffa8 	bl	8000bb2 <led_set>
			msg = "off";
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <main+0x94>)
 8000c64:	607b      	str	r3, [r7, #4]
		}

		// print out some values
		USART_Write(USART2, (uint8_t *)"hi", strlen("hi"));
 8000c66:	2202      	movs	r2, #2
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <main+0x98>)
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <main+0x8c>)
 8000c6c:	f7ff fee9 	bl	8000a42 <USART_Write>
	while (1){
 8000c70:	e7ca      	b.n	8000c08 <main+0x18>
 8000c72:	bf00      	nop
 8000c74:	f3af 8000 	nop.w
 8000c78:	08000dac 	.word	0x08000dac
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	08000db0 	.word	0x08000db0
 8000c84:	08000db4 	.word	0x08000db4
 8000c88:	08000db8 	.word	0x08000db8
 8000c8c:	f7ced917 	.word	0xf7ced917
 8000c90:	bff9e353 	.word	0xbff9e353

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <SystemInit+0x5c>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <SystemInit+0x5c>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x60>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <SystemInit+0x60>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <SystemInit+0x60>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <SystemInit+0x60>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <SystemInit+0x60>)
 8000cc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <SystemInit+0x60>)
 8000ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SystemInit+0x60>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <SystemInit+0x60>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SystemInit+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff ffca 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f000 f811 	bl	8000d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2a:	f7ff ff61 	bl	8000bf0 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d3c:	08000dc4 	.word	0x08000dc4
  ldr r2, =_sbss
 8000d40:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d44:	2000001c 	.word	0x2000001c

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <__libc_init_array>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	4d0d      	ldr	r5, [pc, #52]	; (8000d84 <__libc_init_array+0x38>)
 8000d50:	4c0d      	ldr	r4, [pc, #52]	; (8000d88 <__libc_init_array+0x3c>)
 8000d52:	1b64      	subs	r4, r4, r5
 8000d54:	10a4      	asrs	r4, r4, #2
 8000d56:	2600      	movs	r6, #0
 8000d58:	42a6      	cmp	r6, r4
 8000d5a:	d109      	bne.n	8000d70 <__libc_init_array+0x24>
 8000d5c:	4d0b      	ldr	r5, [pc, #44]	; (8000d8c <__libc_init_array+0x40>)
 8000d5e:	4c0c      	ldr	r4, [pc, #48]	; (8000d90 <__libc_init_array+0x44>)
 8000d60:	f000 f818 	bl	8000d94 <_init>
 8000d64:	1b64      	subs	r4, r4, r5
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	2600      	movs	r6, #0
 8000d6a:	42a6      	cmp	r6, r4
 8000d6c:	d105      	bne.n	8000d7a <__libc_init_array+0x2e>
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}
 8000d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d74:	4798      	blx	r3
 8000d76:	3601      	adds	r6, #1
 8000d78:	e7ee      	b.n	8000d58 <__libc_init_array+0xc>
 8000d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d7e:	4798      	blx	r3
 8000d80:	3601      	adds	r6, #1
 8000d82:	e7f2      	b.n	8000d6a <__libc_init_array+0x1e>
 8000d84:	08000dbc 	.word	0x08000dbc
 8000d88:	08000dbc 	.word	0x08000dbc
 8000d8c:	08000dbc 	.word	0x08000dbc
 8000d90:	08000dc0 	.word	0x08000dc0

08000d94 <_init>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr

08000da0 <_fini>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr
